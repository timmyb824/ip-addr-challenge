- name: Include vars
  ansible.builtin.include_vars: git_vars.yaml

- name: Install git
  ansible.builtin.apt:
    name:
      - git
    state: present

- name: Check if SSH key is already present
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.stat:
    path: "{{ key_path }}"
  register: key_stat_result

- name: Generate SSH key for accessing GitHub
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.command: "ssh-keygen -t rsa -f {{ key_path }} -N ''"
  when: not key_stat_result.stat.exists

- name: Get key content
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.command: "cat {{ key_path }}.pub"
  register: key_content

- name: Check if known_host exists
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.stat:
    path: "{{ known_hosts_path }}"
  register: known_hosts_stat

- name: Create known_hosts if it doesn't exist
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.file:
    path: "{{ known_hosts_path }}"
    state: touch
  when: not known_hosts_stat.stat.exists

- name: Get the content of known hosts
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.shell: "cat {{ known_hosts_path }} | grep github.com"
  register: host_stat
  failed_when: host_stat.rc > 1

- name: Modify known hosts
  become: true
  become_user: "{{ ansible_user }}"
  block:
    - name: Fetch GitHub public
      become: true
      become_user: "{{ ansible_user }}"
      ansible.builtin.command: ssh-keyscan -T 10 github.com
      register: keyscan

    - name: Add GitHub public key to ssh known_hosts
      become: true
      become_user: "{{ ansible_user }}"
      ansible.builtin.lineinfile:
        path: "{{ known_hosts_path }}"
        create: true
        line: "{{ item }}"
      with_items: "{{ keyscan.stdout_lines }}"
      when: host_stat.rc == 1

    - name: Add SSH public key to GitHub account
      become: true
      become_user: "{{ ansible_user }}"
      ansible.builtin.uri:
        url: https://api.github.com/user/keys
        validate_certs: false
        method: POST
        body:
          title: "{{ key_title }}"
          key: "{{ key_content.stdout }}"
        body_format: json
        headers:
          Content-Type: "application/json"
          Authorization: "token {{ github_access_token }}"
        status_code:
          - 201
          - 200
          - 422
      register: task_log

    - name: Create app directory
      become: true
      become_user: "{{ ansible_user }}"
      ansible.builtin.file:
        path: "{{ clone_dest }}"
        state: directory
        mode: "0700"

    - name: Clone Git repo
      become: true
      become_user: "{{ ansible_user }}"
      ansible.builtin.git:
        repo: "{{ git_repo }}"
        dest: "{{ clone_dest }}"
        key_file: "{{ key_path }}"

    - name: Set core.sshCommand config for git
      become: true
      become_user: "{{ ansible_user }}"
      ansible.builtin.shell: >-
        cd {{ clone_dest }} &&
        git config core.sshCommand "ssh -i {{ key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=error"
